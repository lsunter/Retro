[
["index.html", "Replatforming Models Preface", " Replatforming Models Eugene Chang and Leanne Sunter 2020-05-21 Preface This guide has been developed based on examples of replatforming analytical models predominantly from Excel into R within the Department for Education. It is intended to be a living document so if you have any comments or suggestions please contact the Model Improvement and Assurance Unit. Comments and suggestions will be reviewed by the QA Working Group. "],
["introduction.html", "Chapter 1 Introduction 1.1 Who should read this guidance?", " Chapter 1 Introduction Over recent years Government departments have increasingly been using open source programming languages to build and run mathematical models, as well as conduct data analysis. This move towards creating reproducible workflows has a range of benefits but has resulted in a situation where some models are now being run in this new environment, whilst other older and more established models are still being run and maintained via spreadsheets or proprietary software. In this document we provide guidance on how you can determine if it would be beneficial for you to re-platform your model and give practical tips and case studies on how you can approach the move into open source software. 1.1 Who should read this guidance? This guidance is primarily aimed at analysts considering re-platforming a model, however staekeholders who are interested in understanding the benefits and risks of re-platforming may also find this helpful. It is specifically aimed at the task of rewriting a model in a new language, which has subtle, yet important differences from a regular data analysis project. This guidance does not provide details on how to learn to code, details on coding best practice or how your code should be Quality Assured but we have included some useful links throughout and provided further reading(#further_reading). The contents of this document have mainly been compiled from case studies of rewriting Excel models to R within the Department for Education, although the principles discussed still apply to other software languages and Departments. This guidance contains the following sections: Considerations to re-platforming(#considerations) Practical guidance on how to implement a re-platform Case studies Further reading "],
["Considerations.html", "Chapter 2 Considerations to re-platforming 2.1 Barriers to re-platforming 2.2 Benefits of re-platforming", " Chapter 2 Considerations to re-platforming In addition to the many advantages in porting models into open source software, there are also a range of barriers. In this section we discuss these barriers, risks arising from this process and the many benefits realised from re-platforming. We also highlight instances where porting a model may not be the optimal solution and discuss obtaining buy-in from stakeholders. 2.1 Barriers to re-platforming The level and mixture of skills within a team/unit/division can be a barrier, with models often built in a ‘common denominator’ software in order to ensure everyone within a team is able to use and update it. It may be particularly challenging to upskill individuals in relevant languages and/or re-platform a model alongside Business As Usual (BAU) work. Carving out enough time to learn new languages and/or techniques is difficult but as discussed shortly, will often reap time-saving rewards in the longer term. There may also be barriers to re-platforming when a model needs to be shared and/or used by non-technical collagues. This may prevent re-platforming but there may be ways in which the model could be re-platformed with a user interface that would facilitate sharing and/or use by someone without the relevant technical skills. For very simple models, there may simply be no clear need or benefit to re-platforming and this should be considered before time is invested in re-platforming unnecessarily. However, for more complex models, complexity may also be a barrier to re-platforming. More complex models are likely to take more time to build and may involve ???? How complex is the model? e.g. • A stock/flow model with a small number of stocks and flows • A linear regression model • A complex forecasting model involving multiple steps • A stochastic individual level model with data preparation, status prediction via logistic regression, then using the status to predict a linear range ##Risks of re-platforming 2.2 Benefits of re-platforming In short, there are two key benefits to re-platforming: 1: Reproducible Analytical Pipeline (RAP) 2: Speed A Reproducible Analytical Pipeline is hugely beneficial and brings numerous benefits discussed elsewhere. But in short, automating tasks reduces the risk of errors, supports and enables easier version control processes (for example through “Git” or other tools) and collaboration and, if done properly, it means that quality assurance processes are embedded throughout the pipeline as opposed to a time-consuming and manual task at the end of a project or model completion. Speed is the second key benefit of a re-platformed model. A code-based approach can quickly and repeatedly access relevant data, perform relevant calculations and produce a variety of outputs and documentation and perform built-in checks. Automating these processes frees up time for people to focus on more challenging and interesting tasks that are likely to add more value in the long run. For stakeholders, the end result is more time for analysts to focus on more complex problems; robust, rapidly produced outputs and when done well potentially greater scenario testing across assumptions due to increased versatility of model. ##Should you re-platform? Before embarking on re-platforming, even now that you know about the potential barriers, it is still important to consider whether re-platforming is really the right choice for your model. Some important questions to ask yourself before moving ahead include: • How complex is the model? • How frequently is the data refreshed? • How frequently do the data inputs change (formats)? • How many different data inputs are there? • How frequently do the required outputs change? • Who needs to use the model? If a model is very simple and quick to update once a year with a single, very consistent data input and a fixed output, it may not be sensible to spend time re-platforming. However, even a simple model that requires frequent data refreshes could be considered for re-platforming. Continuing along that spectrum, a more complex model with multiple inputs would definitely be a strong candidate for re-platforming. Ultimately, it’s about weighing up whether the investment in the re-platforming process is worthwhile. In a lot of instances this will be the case but for some of the simplest models, or models which need to be used by a non-technical person, it might be necessary to keep the model in Excel. "],
["practical.html", "Chapter 3 Practical guidance on how to implement a re-platform", " Chapter 3 Practical guidance on how to implement a re-platform "]
]
